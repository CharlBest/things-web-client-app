// This file is auto generated by Typewriter Visual Studio extension. Templates are in their own folder
import { Http, Request, Headers } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import { Injectable } from '@angular/core';
import { HttpService } from '../app/shared/http.service';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';
import 'rxjs/add/observable/throw';

@Injectable()
export class AmazonController {
    constructor(private http: Http, private httpService: HttpService) { }
        /**
        *
        * TODO: Observable<viewModel>
        */
        public itemSearch(viewModel: Things.Api.ViewModels.Amazon.AmazonSearchViewModel):
        Observable<AmazonProductAdvertising.Api.Model.AmazonItemResponse> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/amazon/itemSearch`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public itemLookup(viewModel: Things.Api.ViewModels.Amazon.AmazonSearchViewModel):
        Observable<AmazonProductAdvertising.Api.Model.AmazonItemResponse> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/amazon/itemLookup`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
}

@Injectable()
export class MediaController {
    constructor(private http: Http, private httpService: HttpService) { }
        /**
        * Upload media
        * TODO: Observable<null>
        */
        public uploadFile(mediaType: Things.Api.Models.BolbMediaType):
        Observable<Object> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/media/uploadFile?mediaType=${mediaType}`,
                method: `post`,
                body: null,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
}

@Injectable()
export class PaymentController {
    constructor(private http: Http, private httpService: HttpService) { }
        /**
        *
        * TODO: Observable<paymentRequest>
        */
        public processPayment(paymentRequest: Things.Api.ViewModels.Payment.PaymentRequestViewModel):
        Observable<Things.Api.Models.Payment.StripeChargeModel> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/payment/processPayment`,
                method: `post`,
                body: paymentRequest,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
}

@Injectable()
export class PostController {
    constructor(private http: Http, private httpService: HttpService) { }
        /**
        *
        * TODO: Observable<viewModel>
        */
        public getFeed(viewModel: Things.Api.ViewModels.Post.GetFeedViewModel):
        Observable<Things.Api.Models.Post.PostModel[]> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/post/getFeed`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<null>
        */
        public getPost(uId: string):
        Observable<Things.Api.Models.Post.PostModel> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/post/getPost/${encodeURIComponent(uId)}`,
                method: `post`,
                body: null,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public getPostReplies(viewModel: Things.Api.ViewModels.Post.GetPostRepliesViewModel):
        Observable<Things.Api.Models.Post.PostModel[]> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/post/getPostReplies`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public createPost(viewModel: Things.Api.ViewModels.Post.Create.CreatePostViewModel):
        Observable<Things.Api.Models.Post.Post> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/post/createPost`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public getThingPosts(id: number, viewModel: Things.Api.ViewModels.Post.GetThingPostsViewModel):
        Observable<Things.Api.Models.Post.PostModel[]> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/post/getThingPosts/${id}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public getOfficialThingPosts(id: number, viewModel: Things.Api.ViewModels.Post.GetThingPostsViewModel):
        Observable<Things.Api.Models.Post.PostModel[]> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/post/getOfficialThingPosts/${id}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public getThingMediaPosts(id: number, viewModel: Things.Api.ViewModels.Post.GetThingPostsViewModel):
        Observable<Things.Api.Models.Post.Post[]> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/post/getThingMediaPosts/${id}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public getOfficialThingMediaPosts(id: number, viewModel: Things.Api.ViewModels.Post.GetThingPostsViewModel):
        Observable<Things.Api.Models.Post.Post[]> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/post/getOfficialThingMediaPosts/${id}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public getUserThingPosts(id: number, viewModel: Things.Api.ViewModels.Post.GetThingPostsViewModel):
        Observable<Things.Api.Models.Post.PostModel[]> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/post/getUserThingPosts/${id}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public createPostLike(viewModel: Things.Api.ViewModels.Post.PostLikeViewModel):
        Observable<number> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/post/createPostLike`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public deletePostLike(viewModel: Things.Api.ViewModels.Post.PostLikeViewModel):
        Observable<void> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/post/deletePostLike`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public getPostLikes(id: number, viewModel: Things.Api.ViewModels.Post.GetPostLikesViewModel):
        Observable<Things.Api.Models.Thing[]> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/post/getPostLikes/${id}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public getUserPostLikes(id: number, viewModel: Things.Api.ViewModels.Post.GetPostLikesViewModel):
        Observable<Things.Api.Models.Post.PostModel[]> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/post/getUserPostLikes/${id}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public reportPost(viewModel: Things.Api.ViewModels.Post.ReportPostViewModel):
        Observable<void> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/post/reportPost`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
}

@Injectable()
export class ThingsController {
    constructor(private http: Http, private httpService: HttpService) { }
        /**
        *
        * TODO: Observable<viewModel>
        */
        public createPublicThing(viewModel: Things.Api.ViewModels.Thing.CreatePublicThingViewModel):
        Observable<Things.Api.Models.Thing> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/createPublicThing`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public createThing(viewModel: Things.Api.ViewModels.Thing.CreateThingViewModel):
        Observable<Things.Api.Models.Thing> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/createThing`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public discoverThings(viewModel: Things.Api.ViewModels.Thing.DiscoverThingsViewModel):
        Observable<Things.Api.ViewModels.Home.DiscoverViewModel> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/discoverThings`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<null>
        */
        public readThing(id: number, version?: number):
        Observable<Things.Api.Models.ThingModel> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/readThing/${id}/${version}`,
                method: `get`,
                body: null,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public readThingChildren(id: number, viewModel: Things.Api.ViewModels.Thing.GetThingChildrenViewModel):
        Observable<Things.Api.ViewModels.Thing.ThingChildrenViewModel[]> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/readThingChildren/${id}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<null>
        */
        public readRelatedThings(id: number):
        Observable<Things.Api.Models.Thing[]> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/readRelatedThings/${id}`,
                method: `get`,
                body: null,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<null>
        */
        public readThingForHierarchy(hierarchy: string):
        Observable<number> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/readThingForHierarchy/${encodeURIComponent(hierarchy)}`,
                method: `get`,
                body: null,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public editThing(id: number, viewModel: Things.Api.ViewModels.Thing.Edit.EditThingViewModel):
        Observable<Things.Api.Models.Thing> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/editThing/${id}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public editThingTags(id: number, viewModel: Things.Api.ViewModels.Thing.Edit.EditThingTagsViewModel):
        Observable<Things.Api.Models.Thing> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/editThingTags/${id}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public editPublicThingTags(id: number, token: string, viewModel: Things.Api.ViewModels.Thing.Edit.EditThingTagsViewModel):
        Observable<Things.Api.Models.Thing> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/editPublicThingTags/${id}?token=${encodeURIComponent(token)}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public editThingDescription(id: number, viewModel: Things.Api.ViewModels.Thing.Edit.EditThingDescriptionViewModel):
        Observable<Things.Api.Models.Thing> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/editThingDescription/${id}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public editPublicThingDescription(id: number, token: string, viewModel: Things.Api.ViewModels.Thing.Edit.EditThingDescriptionViewModel):
        Observable<Things.Api.Models.Thing> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/editPublicThingDescription/${id}?token=${encodeURIComponent(token)}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public editThingMedia(id: number, viewModel: Things.Api.ViewModels.Thing.Edit.EditThingMediaViewModel):
        Observable<Things.Api.Models.Thing> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/editThingMedia/${id}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public editPublicThingMedia(id: number, token: string, viewModel: Things.Api.ViewModels.Thing.Edit.EditThingMediaViewModel):
        Observable<Things.Api.Models.Thing> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/editPublicThingMedia/${id}?token=${encodeURIComponent(token)}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public editThingAmazonLink(id: number, viewModel: Things.Api.ViewModels.Thing.Edit.EditThingAmazonLinkViewModel):
        Observable<Things.Api.Models.Thing> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/editThingAmazonLink/${id}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public editPublicThingAmazonLink(id: number, token: string, viewModel: Things.Api.ViewModels.Thing.Edit.EditThingAmazonLinkViewModel):
        Observable<Things.Api.Models.Thing> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/editPublicThingAmazonLink/${id}?token=${encodeURIComponent(token)}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public getPublicThingAuthToken(id: number, viewModel: Things.Api.ViewModels.Thing.ThingAuthTokenViewModel):
        Observable<Things.Api.ViewModels.Thing.AuthToken> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/getPublicThingAuthToken/${id}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<newThingIdAfter>
        */
        public moveThing(id: number, newThingIdAfter: number):
        Observable<Things.Api.Models.Thing> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/moveThing/${id}`,
                method: `post`,
                body: newThingIdAfter,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<null>
        */
        public deleteThing(id: number):
        Observable<Things.Api.Models.Thing> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/deleteThing/${id}`,
                method: `delete`,
                body: null,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public searchThingStartWith(viewModel: Things.Api.ViewModels.Thing.SearchViewModel):
        Observable<Things.Api.Models.Thing[]> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/searchThingStartWith`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public searchThingHierarchy(viewModel: Things.Api.ViewModels.Thing.SearchViewModel):
        Observable<Things.Api.Models.SearchParentHierarchy[]> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/searchThingHierarchy`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public searchThingHierarchyForParent(id: number, viewModel: Things.Api.ViewModels.Thing.SearchViewModel):
        Observable<Things.Api.Models.Thing[]> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/searchThingHierarchyForParent/${id}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public searchThingStartWithForParent(parentThingId: number, viewModel: Things.Api.ViewModels.Thing.SearchViewModel):
        Observable<Things.Api.Models.Thing[]> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/searchThingStartWithForParent/${parentThingId}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public searchUserStartWith(viewModel: Things.Api.ViewModels.Thing.SearchViewModel):
        Observable<Things.Api.Models.Thing[]> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/searchUserStartWith`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public getThingsForTag(viewModel: Things.Api.ViewModels.Thing.GetThingForTagViewModel):
        Observable<Things.Api.Models.Thing[]> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/getThingsForTag`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public searchTags(viewModel: Things.Api.ViewModels.Thing.SearchViewModel):
        Observable<Things.Api.ViewModels.Thing.TagsSearchResultViewModel[]> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/searchTags`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public createThingLike(viewModel: Things.Api.ViewModels.Thing.ThingLikeViewModel):
        Observable<number> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/createThingLike`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public deleteThingLike(viewModel: Things.Api.ViewModels.Thing.ThingLikeViewModel):
        Observable<void> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/deleteThingLike`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public getThingLikes(id: number, viewModel: Things.Api.ViewModels.Thing.GetThingLikesViewModel):
        Observable<Things.Api.Models.Thing[]> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/getThingLikes/${id}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public getUserThingLikes(id: number, viewModel: Things.Api.ViewModels.Thing.GetThingLikesViewModel):
        Observable<Things.Api.Models.Thing[]> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/getUserThingLikes/${id}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public createThingFollower(viewModel: Things.Api.ViewModels.Thing.ThingFollowerViewModel):
        Observable<number> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/createThingFollower`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public deleteThingFollower(viewModel: Things.Api.ViewModels.Thing.ThingFollowerViewModel):
        Observable<void> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/deleteThingFollower`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public getThingFollowers(id: number, viewModel: Things.Api.ViewModels.Thing.GetThingFollowersViewModel):
        Observable<Things.Api.Models.Thing[]> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/getThingFollowers/${id}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public getUserThingFollowing(id: number, viewModel: Things.Api.ViewModels.Thing.GetThingFollowersViewModel):
        Observable<Things.Api.Models.Thing[]> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/getUserThingFollowing/${id}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public sendFeedback(viewModel: Things.Api.ViewModels.Thing.FeedbackViewModel):
        Observable<void> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/sendFeedback`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<null>
        */
        public exportThings():
        Observable<string> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/exportThings`,
                method: `post`,
                body: null,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public reportThing(viewModel: Things.Api.ViewModels.Thing.ReportThingViewModel):
        Observable<void> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/reportThing`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public getThingActivity(id: number, viewModel: Things.Api.ViewModels.Activity.GetThingActivityViewModel):
        Observable<Things.Api.ViewModels.Activity.ThingActivityViewModel[]> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/getThingActivity/${id}`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<null>
        */
        public getUserThingDetails(id: number):
        Observable<Things.Api.ViewModels.Thing.GetUserThingDetailsViewModel> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/things/getUserThingDetails/${id}`,
                method: `post`,
                body: null,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
}

@Injectable()
export class UserController {
    constructor(private http: Http, private httpService: HttpService) { }
        /**
        *
        * TODO: Observable<viewModel>
        */
        public createUserThing(viewModel: Things.Api.ViewModels.User.CreateUserThingViewModel):
        Observable<Things.Api.Models.Thing> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/user/createUserThing`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<title>
        */
        public doesUserThingTitleExist(title: string):
        Observable<boolean> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/user/doesUserThingTitleExist`,
                method: `post`,
                body: title,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public forgotPassword(viewModel: Things.Api.ViewModels.User.ForgotPasswordViewModel):
        Observable<void> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/user/forgotPassword`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public changeForgottenPassword(viewModel: Things.Api.ViewModels.User.ChangeForgottenPasswordViewModel):
        Observable<Things.Api.Models.Thing> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/user/changeForgottenPassword`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public login(viewModel: Things.Api.Models.User.LoginViewModel):
        Observable<Things.Api.Models.Common.RequestResult> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/user/login`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<userDetailFollowingType>
        */
        public createUserDetailFollower(id: number, userDetailFollowingType: Things.Api.ViewModels.Thing.UserDetailFollowingType):
        Observable<number> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/user/createUserDetailFollower/${id}`,
                method: `post`,
                body: userDetailFollowingType,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<userDetailFollowingType>
        */
        public deleteUserDetailFollower(id: number, userDetailFollowingType: Things.Api.ViewModels.Thing.UserDetailFollowingType):
        Observable<number> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/user/deleteUserDetailFollower/${id}`,
                method: `post`,
                body: userDetailFollowingType,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public createNewsletterMember(viewModel: Things.Api.ViewModels.User.NewsletterMemberViewModel):
        Observable<boolean> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/user/createNewsletterMember`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
        /**
        *
        * TODO: Observable<viewModel>
        */
        public deleteNewsletterMember(viewModel: Things.Api.ViewModels.User.NewsletterMemberViewModel):
        Observable<boolean> {

            let headers = new Headers({ 'Content-Type': 'application/json' });
            headers = this.httpService.addAuthHeaders(headers);

            const request = new Request({
                url: `${this.httpService.apiUrl}/api/user/deleteNewsletterMember`,
                method: `post`,
                body: viewModel,
                headers: headers
            });

            return this.http.request(request)
                .map((res) => this.httpService.extractData(res))
                .catch((err) => this.httpService.handleError(err));
        };
}
export namespace Things.Api.ViewModels.Activity {
    export enum ActivityType {
        officialPost = 1,
        newThing = 2,
        descriptionChange = 3,
    }
}
export namespace AmazonProductAdvertising.Api.Model {
    export class AmazonCartItem {
        asin: string;
        quantity: number;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class AmazonError {
        code: string;
        message: string;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class AmazonErrorResponse {
        error: AmazonProductAdvertising.Api.Model.AmazonError;
        requestId: string;
    }
}
export namespace AmazonProductAdvertising.Api.Model {
    export class AmazonResponse {
        operationRequest: AmazonProductAdvertising.Api.Model.OperationRequest;
    }
}
export namespace AmazonProductAdvertising.Api.Model {
    export class AmazonItemResponse extends AmazonResponse {
        items: AmazonProductAdvertising.Api.Model.Items;
    }
}



export namespace AmazonProductAdvertising.Api.Model {
    export enum AmazonResponseGroup {
        tracks = 1,
        topSellers = 2,
        variations = 4,
        variationImages = 8,
        variationMatrix = 16,
        variationOffers = 32,
        variationSummary = 64,
        medium = 128,
        mostGifted = 256,
        mostWishedFor = 512,
        newReleases = 1024,
        offerFull = 2048,
        offerListings = 4096,
        offers = 8192,
        offerSummary = 16384,
        promotionSummary = 32768,
        relatedItems = 65536,
        request = 131072,
        reviews = 262144,
        salesRank = 524288,
        searchBins = 1048576,
        similarities = 2097152,
        small = 4194304,
        accessories = 8388608,
        alternateVersions = 16777216,
        browseNodeInfo = 33554432,
        browseNodes = 67108864,
        editorialReview = 134217728,
        images = 268435456,
        itemAttributes = 536870912,
        large = 1073741824,
    }
}
export namespace AmazonProductAdvertising.Api.Model {
    export enum AmazonSearchIndex {
        all = 0,
        apparel = 1,
        automotive = 2,
        baby = 3,
        beauty = 4,
        blended = 5,
        books = 6,
        classical = 7,
        digitalMusic = 8,
        dvd = 9,
        electronics = 10,
        foreignBooks = 11,
        gourmetFood = 12,
        grocery = 13,
        healthPersonalCare = 14,
        hobbies = 15,
        homeGarden = 16,
        industrial = 17,
        jewelry = 18,
        kindleStore = 19,
        kitchen = 20,
        magazines = 21,
        merchants = 22,
        miscellaneous = 23,
        mP3Downloads = 24,
        music = 25,
        musicalInstruments = 26,
        musicTracks = 27,
        officeProducts = 28,
        outdoorLiving = 29,
        pcHardware = 30,
        petSupplies = 31,
        photo = 32,
        software = 33,
        softwareVideoGames = 34,
        sportingGoods = 35,
        tools = 36,
        toys = 37,
        vhs = 38,
        video = 39,
        videoGames = 40,
        watches = 41,
        wireless = 42,
        wirelessAccessories = 43,
    }
}
export namespace AmazonProductAdvertising.Api.Model {
    export enum AmazonSearchSort {
        titlerank = 0,
        salesrank = 1,
        price = 2,
    }
}
export namespace AmazonProductAdvertising.Api.Model {
    export enum AmazonSearchSortOrder {
        ascending = 0,
        descending = 1,
    }
}
export namespace Things.Api.ViewModels.Amazon {
    export class AmazonSearchViewModel {
        term: string;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class AmazonSimpleItem {
        asin: string;
        name: string;
        imageUrl: string;
        price: number;
        description: string[];
        sourceItem: AmazonProductAdvertising.Api.Model.Item;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class Argument {
        name: string;
        value: string;
    }
}

export namespace Things.Api.ViewModels.Thing {
    export class AuthToken {
        token: string;
    }
}
export namespace AmazonProductAdvertising.Api.Model {
    export class Request {
        isValid: string;
        errors: AmazonProductAdvertising.Api.Model.AmazonError[];
    }
}
export namespace AmazonProductAdvertising.Api.Model {
    export class BaseBrowseNodeLookupRequest extends Request {
        browseNodeLookupRequest: AmazonProductAdvertising.Api.Model.BrowseNodeLookupRequest;
    }
}

export namespace Things.Api.Models {
    export class BaseThing {
        id: number;
        uId: string;
        thingType: Things.Api.Models.ThingType;
        title: string;
        dateTimeCreated: number;
    }
}

export namespace Things.Api.Models {
    export enum BolbMediaType {
        thingImage = 1,
        postImage = 2,
        commentImage = 3,
        ctaDownloadFile = 4,
    }
}
export namespace AmazonProductAdvertising.Api.Model {
    export class BrowseNode {
        browseNodeId: string;
        name: string;
        isCategoryRoot: number;
        children: AmazonProductAdvertising.Api.Model.BrowseNode[];
        topSellers: AmazonProductAdvertising.Api.Model.TopSellers;
        topItemSet: AmazonProductAdvertising.Api.Model.TopItemSet;
        ancestors: AmazonProductAdvertising.Api.Model.BrowseNode[];
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class BrowseNodeLookupErrorResponse extends AmazonErrorResponse {
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class BrowseNodeLookupRequest {
        browseNodeId: string;
        responseGroup: string;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class BrowseNodeLookupResponse extends AmazonResponse {
        browseNodes: AmazonProductAdvertising.Api.Model.BrowseNodes;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class BrowseNodes {
        request: AmazonProductAdvertising.Api.Model.BaseBrowseNodeLookupRequest;
        browseNode: AmazonProductAdvertising.Api.Model.BrowseNode;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class Cart {
        request: AmazonProductAdvertising.Api.Model.Request;
        cartId: string;
        purchaseURL: string;
        hmac: string;
        urlEncodedHMAC: string;
        subTotal: AmazonProductAdvertising.Api.Model.Price;
        cartItems: AmazonProductAdvertising.Api.Model.CartItems;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class CartCreateErrorResponse extends AmazonErrorResponse {
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class CartCreateResponse extends AmazonResponse {
        cart: AmazonProductAdvertising.Api.Model.Cart;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class CartItem {
        cartItemId: string;
        asin: string;
        sellerNickname: string;
        quantity: number;
        title: string;
        productGroup: string;
        price: AmazonProductAdvertising.Api.Model.Price;
        itemTotal: AmazonProductAdvertising.Api.Model.Price;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class CartItems {
        subTotal: AmazonProductAdvertising.Api.Model.Price;
        cartItem: AmazonProductAdvertising.Api.Model.CartItem;
    }
}

export namespace Things.Api.ViewModels.User {
    export class ChangeForgottenPasswordViewModel {
        code: string;
        password: string;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class CorrectedQuery {
        keywords: string;
        message: string;
    }
}

export namespace Things.Api.ViewModels.User {
    export class CreateNewsletterMemberViewModel {
        email: number;
    }
}

export namespace Things.Api.ViewModels.Post.Create {
    export class CreatePostViewModel {
        content: string;
        htmlContent: string;
        media: string;
        replyToPostUId: string;
    }
}

export namespace Things.Api.Models {
    export class CreatePublicThingValidationModel {
        doesTitleExist: boolean;
        hasUserAtRoot: boolean;
        isShortcutThingValid: boolean;
    }
}

export namespace Things.Api.ViewModels.Thing {
    export class CreatePublicThingViewModel {
        thingType: Things.Api.Models.ThingType;
        title: string;
        password: string;
        parentThingId: number;
        isPublsihed: boolean;
        publicRootThingAuthToken: string;
        shortcutThingId?: number;
    }
}

export namespace Things.Api.Models {
    export class CreateThingValidationModel {
        doesTitleExist: boolean;
        hasUserAtRoot: boolean;
        isShortcutThingValid: boolean;
    }
}

export namespace Things.Api.ViewModels.Thing {
    export class CreateThingViewModel {
        thingType: Things.Api.Models.ThingType;
        title: string;
        parentThingId: number;
        isPublsihed: boolean;
        shortcutThingId?: number;
    }
}

export namespace Things.Api.ViewModels.User {
    export class CreateUserThingViewModel {
        title: string;
        email: string;
        password: string;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class CustomerReviews {
        iFrameURL: string;
        hasReviews: boolean;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class DecimalWithUnits {
        units: string;
        value: number;
    }
}

export namespace Things.Api.ViewModels.Thing {
    export class DiscoverThingsViewModel {
        skip: number;
    }
}

export namespace Things.Api.ViewModels.Home {
    export class DiscoverViewModel {
        things: Things.Api.Models.ThingWithParents[];
        tags: Things.Api.Models.TagModel[];
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class EditorialReview {
        source: string;
        content: string;
        isLinkSuppressed: boolean;
    }
}

export namespace Things.Api.ViewModels.Thing.Edit {
    export class EditThingAmazonLinkViewModel {
        amazonProductId: string;
    }
}

export namespace Things.Api.ViewModels.Thing.Edit {
    export class EditThingDescriptionViewModel {
        content: string;
    }
}

export namespace Things.Api.ViewModels.Thing.Edit {
    export class EditThingMediaViewModel {
        media: string[];
    }
}

export namespace Things.Api.ViewModels.Thing.Edit {
    export class EditThingTagsViewModel {
        tags: string[];
    }
}

export namespace Things.Api.ViewModels.Thing.Edit {
    export class EditThingViewModel {
        thingType: Things.Api.Models.ThingType;
        title: string;
        description: string;
        media: string[];
        isPublsihed: boolean;
        editAuthToken: string;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class ExtendedWebResponse {
    }
}

export namespace Things.Api.ViewModels.Thing {
    export class FeedbackViewModel {
        content: string;
    }
}

export namespace Things.Api.ViewModels.User {
    export class ForgotPasswordViewModel {
        email: string;
    }
}

export namespace Things.Api.ViewModels.Post {
    export class GetFeedViewModel {
        skip: number;
    }
}

export namespace Things.Api.ViewModels.Post {
    export class GetPostLikesViewModel {
        skip: number;
    }
}

export namespace Things.Api.ViewModels.Post {
    export class GetPostRepliesViewModel {
        postUId: string;
        skip: number;
    }
}

export namespace Things.Api.ViewModels.Activity {
    export class GetThingActivityViewModel {
        skip: number;
    }
}

export namespace Things.Api.ViewModels.Thing {
    export class GetThingChildrenViewModel {
        skip: number;
    }
}

export namespace Things.Api.ViewModels.Thing {
    export class GetThingFollowersViewModel {
        skip: number;
    }
}

export namespace Things.Api.ViewModels.Thing {
    export class GetThingForTagViewModel {
        tag: string;
        skip: number;
    }
}

export namespace Things.Api.ViewModels.Thing {
    export class GetThingLikesViewModel {
        skip: number;
    }
}

export namespace Things.Api.ViewModels.Post {
    export class GetThingPostsViewModel {
        skip: number;
    }
}

export namespace Things.Api.ViewModels.Thing {
    export class GetUserThingDetailsViewModel {
        posts: number;
        thingsFollowing: number;
        thingsLiked: number;
        postsLiked: number;
        followedPosts: boolean;
        followedFollowing: boolean;
        followedThingLikes: boolean;
        followedPostLikes: boolean;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class HttpHeader {
        name: string;
        value: string;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class Image {
        url: string;
        height: AmazonProductAdvertising.Api.Model.DecimalWithUnits;
        width: AmazonProductAdvertising.Api.Model.DecimalWithUnits;
        isVerified: string;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class ImageSet {
        swatchImage: AmazonProductAdvertising.Api.Model.Image;
        smallImage: AmazonProductAdvertising.Api.Model.Image;
        thumbnailImage: AmazonProductAdvertising.Api.Model.Image;
        tinyImage: AmazonProductAdvertising.Api.Model.Image;
        mediumImage: AmazonProductAdvertising.Api.Model.Image;
        largeImage: AmazonProductAdvertising.Api.Model.Image;
        category: string;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class Item {
        asin: string;
        parentASIN: string;
        detailPageURL: string;
        itemLinks: AmazonProductAdvertising.Api.Model.ItemLink[];
        salesRank: string;
        smallImage: AmazonProductAdvertising.Api.Model.Image;
        mediumImage: AmazonProductAdvertising.Api.Model.Image;
        largeImage: AmazonProductAdvertising.Api.Model.Image;
        imageSets: AmazonProductAdvertising.Api.Model.ImageSet[];
        itemAttributes: AmazonProductAdvertising.Api.Model.ItemAttributes;
        offerSummary: AmazonProductAdvertising.Api.Model.OfferSummary;
        offers: AmazonProductAdvertising.Api.Model.Offers;
        customerReviews: AmazonProductAdvertising.Api.Model.CustomerReviews;
        editorialReviews: AmazonProductAdvertising.Api.Model.EditorialReview[];
        variationSummary: AmazonProductAdvertising.Api.Model.VariationSummary;
        similarProducts: AmazonProductAdvertising.Api.Model.SimilarProductsSimilarProduct[];
        browseNodes: AmazonProductAdvertising.Api.Model.BrowseNode[];
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class ItemAttributes {
        actor: string[];
        artist: string[];
        aspectRatio: string;
        audienceRating: string;
        audioFormat: string[];
        author: string[];
        binding: string;
        brand: string;
        catalogNumberList: string[];
        category: string[];
        ceroAgeRating: string;
        clothingSize: string;
        color: string;
        creator: AmazonProductAdvertising.Api.Model.ItemAttributesCreator[];
        department: string;
        director: string[];
        ean: string;
        eanList: string[];
        edition: string;
        eisbn: string[];
        episodeSequence: string;
        esrbAgeRating: string;
        feature: string[];
        format: string[];
        genre: string;
        hardwarePlatform: string;
        hazardousMaterialType: string;
        isAdultProduct: boolean;
        isAutographed: boolean;
        isbn: string;
        isEligibleForTradeIn: boolean;
        isMemorabilia: boolean;
        issuesPerYear: string;
        itemDimensions: AmazonProductAdvertising.Api.Model.ItemAttributesItemDimensions;
        itemPartNumber: string;
        label: string;
        languages: AmazonProductAdvertising.Api.Model.ItemAttributesLanguage[];
        legalDisclaimer: string;
        listPrice: AmazonProductAdvertising.Api.Model.Price;
        magazineType: string;
        manufacturer: string;
        manufacturerMaximumAge: AmazonProductAdvertising.Api.Model.DecimalWithUnits;
        manufacturerMinimumAge: AmazonProductAdvertising.Api.Model.DecimalWithUnits;
        manufacturerPartsWarrantyDescription: string;
        mediaType: string;
        model: string;
        modelYear: string;
        mpn: string;
        numberOfDiscs: string;
        numberOfIssues: string;
        numberOfItems: string;
        numberOfPages: string;
        numberOfTracks: string;
        operatingSystem: string;
        packageDimensions: AmazonProductAdvertising.Api.Model.ItemAttributesPackageDimensions;
        packageQuantity: string;
        partNumber: string;
        pictureFormat: string[];
        platform: string[];
        productGroup: string;
        productTypeName: string;
        productTypeSubcategory: string;
        publicationDate: string;
        publisher: string;
        regionCode: string;
        releaseDate: string;
        runningTime: AmazonProductAdvertising.Api.Model.DecimalWithUnits;
        seikodoProductCode: string;
        size: string;
        sku: string;
        studio: string;
        subscriptionLength: AmazonProductAdvertising.Api.Model.NonNegativeIntegerWithUnits;
        title: string;
        trackSequence: string;
        tradeInValue: AmazonProductAdvertising.Api.Model.Price;
        upc: string;
        upcList: string[];
        warranty: string;
        weeeTaxValue: AmazonProductAdvertising.Api.Model.Price;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class ItemAttributesCreator {
        role: string;
        name: string;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class ItemAttributesItemDimensions {
        height: AmazonProductAdvertising.Api.Model.DecimalWithUnits;
        length: AmazonProductAdvertising.Api.Model.DecimalWithUnits;
        weight: AmazonProductAdvertising.Api.Model.DecimalWithUnits;
        width: AmazonProductAdvertising.Api.Model.DecimalWithUnits;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class ItemAttributesLanguage {
        name: string;
        type: string;
        audioFormat: string;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class ItemAttributesPackageDimensions {
        height: AmazonProductAdvertising.Api.Model.DecimalWithUnits;
        length: AmazonProductAdvertising.Api.Model.DecimalWithUnits;
        weight: AmazonProductAdvertising.Api.Model.DecimalWithUnits;
        width: AmazonProductAdvertising.Api.Model.DecimalWithUnits;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export enum ItemCondition {
        new = 0,
        used = 1,
        collectible = 2,
        refurbished = 3,
        all = 4,
    }
}
export namespace AmazonProductAdvertising.Api.Model {
    export class ItemLink {
        description: string;
        url: string;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class ItemLookupErrorResponse extends AmazonErrorResponse {
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class ItemLookupResponse extends AmazonItemResponse {
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class Items {
        correctedQuery: AmazonProductAdvertising.Api.Model.CorrectedQuery;
        qid: string;
        engineQuery: string;
        totalResults: string;
        totalPages: string;
        moreSearchResultsUrl: string;
        request: AmazonProductAdvertising.Api.Model.Request;
        item: AmazonProductAdvertising.Api.Model.Item[];
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class ItemSearchErrorResponse extends AmazonErrorResponse {
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class ItemSearchResponse extends AmazonItemResponse {
    }
}

export namespace Things.Api.Models {
    export enum LogLevel {
        trace = 0,
        debug = 1,
        information = 2,
        warning = 3,
        error = 4,
        critical = 5,
        none = 6,
    }
}
export namespace AmazonProductAdvertising.Api.Model {
    export class LoyaltyPoints {
        points: string;
        typicalRedemptionValue: AmazonProductAdvertising.Api.Model.Price;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class Merchant {
        name: string;
    }
}

export namespace Things.Api.ViewModels.User {
    export class NewsletterMemberViewModel {
        email: string;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class NonNegativeIntegerWithUnits {
        units: string;
        value: string;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class Offer {
        merchant: AmazonProductAdvertising.Api.Model.Merchant;
        offerAttributes: AmazonProductAdvertising.Api.Model.OfferAttributes;
        offerListing: AmazonProductAdvertising.Api.Model.OfferListing[];
        loyaltyPoints: AmazonProductAdvertising.Api.Model.LoyaltyPoints;
        promotions: AmazonProductAdvertising.Api.Model.Promotion[];
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class OfferAttributes {
        condition: string;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class OfferListing {
        offerListingId: string;
        price: AmazonProductAdvertising.Api.Model.Price;
        salePrice: AmazonProductAdvertising.Api.Model.Price;
        amountSaved: AmazonProductAdvertising.Api.Model.Price;
        percentageSaved: string;
        availability: string;
        isEligibleForSuperSaverShipping: boolean;
        isEligibleForPrime: boolean;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class Offers {
        totalOffers: string;
        totalOfferPages: string;
        moreOffersUrl: string;
        offer: AmazonProductAdvertising.Api.Model.Offer[];
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class OfferSummary {
        lowestNewPrice: AmazonProductAdvertising.Api.Model.Price;
        lowestUsedPrice: AmazonProductAdvertising.Api.Model.Price;
        lowestCollectiblePrice: AmazonProductAdvertising.Api.Model.Price;
        lowestRefurbishedPrice: AmazonProductAdvertising.Api.Model.Price;
        totalNew: string;
        totalUsed: string;
        totalCollectible: string;
        totalRefurbished: string;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class OperationRequest {
        requestId: string;
        requestProcessingTime: number;
        arguments: AmazonProductAdvertising.Api.Model.Argument[];
        errors: AmazonProductAdvertising.Api.Model.AmazonError[];
    }
}

export namespace Things.Api.Models {
    export class ParentHierarchyItem {
        id: number;
        title: string;
    }
}

export namespace Things.Api.ViewModels.Payment {
    export class PaymentRequestViewModel {
        tokenId: string;
        productName: string;
        amount: number;
    }
}

export namespace Things.Api.Models.Post {
    export class Post {
        id: number;
        uId: string;
        content: string;
        media: string;
        dateTimeCreated: number;
        likes: number;
        replies: number;
    }
}

export namespace Things.Api.ViewModels.Post {
    export class PostLikeViewModel {
        likePostId: number;
    }
}

export namespace Things.Api.Models.Post {
    export class PostModel {
        post: Things.Api.Models.Post.Post;
        liked: boolean;
        mentions: Things.Api.Models.ThingMentionModel[];
        user: Things.Api.Models.Thing;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class Price {
        amount: string;
        currencyCode: string;
        formattedPrice: string;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class Promotion {
        summary: AmazonProductAdvertising.Api.Model.PromotionSummary;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class PromotionSummary {
        promotionId: string;
        category: string;
        startDate: string;
        endDate: string;
        eligibilityRequirementDescription: string;
        benefitDescription: string;
        termsAndConditions: string;
    }
}

export namespace Things.Api.ViewModels.Thing {
    export class PublicThingToken {
        id: number;
        authToken: string;
    }
}

export namespace Things.Api.ViewModels.Post {
    export class ReportPostViewModel {
        postUId: string;
    }
}

export namespace Things.Api.ViewModels.Thing {
    export class ReportThingViewModel {
        thingId: number;
    }
}



export namespace Things.Api.Models.Common {
    export class RequestResult {
        state: Things.Api.Models.Common.RequestState;
        msg: string;
        data: Object;
    }
}

export namespace Things.Api.Models.Common {
    export enum RequestState {
        failed = -1,
        notAuth = 0,
        success = 1,
    }
}
export namespace Things.Api.Models {
    export class SearchParentHierarchy {
        user: string;
        parentHierarchy: string[];
    }
}

export namespace Things.Api.ViewModels.Thing {
    export class SearchViewModel {
        term: string;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class SimilarProductsSimilarProduct {
        asin: string;
        title: string;
    }
}

export namespace Things.Api.Models.Payment {
    export class StripeChargeModel {
        status: string;
    }
}

export namespace Things.Api.Models {
    export class TagModel {
        name: string;
        links: number;
    }
}

export namespace Things.Api.ViewModels.Thing {
    export class TagsSearchResultViewModel {
        name: string;
        links: number;
    }
}

export namespace Things.Api.Models {
    export class Thing extends BaseThing {
        description: string;
        media: string[];
        password: string;
        passwordSalt: string;
        version: string;
        isPublished: boolean;
        isVerified: boolean;
        likes: number;
        followers: number;
        amazonProductId: string;
    }
}

export namespace Things.Api.ViewModels.Activity {
    export class ThingActivityViewModel {
        activityType: Things.Api.ViewModels.Activity.ActivityType;
        data: Object;
    }
}

export namespace Things.Api.ViewModels.Thing {
    export class ThingAuthTokenViewModel {
        password: string;
    }
}

export namespace Things.Api.ViewModels.Thing {
    export class ThingChildrenViewModel {
        thing: Things.Api.Models.Thing;
        shortcutId?: number;
        liked: boolean;
        followed: boolean;
        underneathCount: number;
    }
}

export namespace Things.Api.Models {
    export class ThingDescription {
        content: string;
        dateTimeCreated: number;
    }
}

export namespace Things.Api.ViewModels.Thing {
    export class ThingFollowerViewModel {
        followThingId: number;
    }
}

export namespace Things.Api.ViewModels.Thing {
    export class ThingLikeViewModel {
        likeThingId: number;
    }
}

export namespace Things.Api.Models {
    export class ThingMentionModel {
        thingId: number;
        indicies: number[];
        version: number;
    }
}

export namespace Things.Api.Models {
    export class ThingModel {
        thing: Things.Api.Models.Thing;
        tags: string[];
        parentHierarchy: string[][];
        description: Things.Api.Models.ThingDescription;
        latestVersion: number;
        liked: boolean;
        followed: boolean;
        parentThingFollowId?: number;
    }
}

export namespace Things.Api.Models {
    export enum ThingType {
        general = 1,
        shortcut = 2,
        user = 3,
    }
}
export namespace Things.Api.Models {
    export class ThingWithParents {
        thing: Things.Api.Models.Thing;
        parentHierarchy: string[];
    }
}

export namespace Things.Api.Models {
    export class ThinThingModel {
        id: number;
        title: string;
        isVerified: boolean;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class TopItem {
        asin: string;
        title: string;
        detailPageURL: string;
        productGroup: string;
        actor: string[];
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class TopItemSet {
        type: string;
        topItem: AmazonProductAdvertising.Api.Model.TopItem[];
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class TopSeller {
        asin: string;
        title: string;
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class TopSellers {
        topSeller: AmazonProductAdvertising.Api.Model.TopSeller[];
    }
}

export namespace Things.Api.ViewModels.Thing {
    export enum UserDetailFollowingType {
        posts = 1,
        following = 2,
        thingLikes = 3,
        postLikes = 4,
    }
}
export namespace Things.Api.Models.User {
    export class LoginViewModel {
        title: string;
        email: string;
        password: string;
    }
}

export namespace Things.Api.Models.Validation {
    export class ValidationModel {
        key: string;
        errors: string[];
    }
}

export namespace AmazonProductAdvertising.Api.Model {
    export class VariationSummary {
        highestPrice: AmazonProductAdvertising.Api.Model.Price;
        lowestSalePrice: AmazonProductAdvertising.Api.Model.Price;
        highestSalePrice: AmazonProductAdvertising.Api.Model.Price;
    }
}
